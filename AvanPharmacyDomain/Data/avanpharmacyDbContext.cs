// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using avanphamaceuticalsmanagement.Shared.Models;
using Microsoft.EntityFrameworkCore;

namespace AvanPharmacyDomain.Data;

public partial class avanpharmacyDbContext : DbContext
{
    public avanpharmacyDbContext(DbContextOptions<avanpharmacyDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AgrovetStockTable> AgrovetStockTables { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<BudgetTypeTable> BudgetTypeTables { get; set; }

    public virtual DbSet<BudgetsTable> BudgetsTables { get; set; }

    public virtual DbSet<CosmeticsStockTable> CosmeticsStockTables { get; set; }

    public virtual DbSet<CustomerTypeTable> CustomerTypeTables { get; set; }

    public virtual DbSet<DeviceCode> DeviceCodes { get; set; }

    public virtual DbSet<DrugStockTable> DrugStockTables { get; set; }

    public virtual DbSet<Drugcategory> Drugcategories { get; set; }

    public virtual DbSet<EmployeesTable> EmployeesTables { get; set; }

    public virtual DbSet<ExpenseTypesTable> ExpenseTypesTables { get; set; }

    public virtual DbSet<ExpensesTable> ExpensesTables { get; set; }
    public virtual DbSet<PatientsTable> PatientsTables { get; set; }

    public virtual DbSet<PharmacyTransactionsTable> PharmacyTransactionsTables { get; set; }

    public virtual DbSet<RestockRequestsTable> RestockRequestsTables { get; set; }

    public virtual DbSet<RestockStatusTable> RestockStatusTables { get; set; }

    public virtual DbSet<StockCategoryTable> StockCategoryTables { get; set; }

    public virtual DbSet<StockTable> StockTables { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<BudgetsTable>(entity =>
        {
            entity.HasOne(d => d.BudgetType).WithMany(p => p.BudgetsTables).HasConstraintName("FK_BudgetsTable_BudgetTypeTable");
        });

        modelBuilder.Entity<DrugStockTable>(entity =>
        {
            entity.HasOne(d => d.DrugCatNavigation).WithMany(p => p.DrugStockTables).HasConstraintName("FK_DrugStockTable_Drugcategories");
        });

        modelBuilder.Entity<ExpensesTable>(entity =>
        {
            entity.HasOne(d => d.ExpenseType).WithMany(p => p.ExpensesTables).HasConstraintName("FK_ExpensesTable_ExpenseTypesTable");
        });

        modelBuilder.Entity<PharmacyTransactionsTable>(entity =>
        {
            entity.HasOne(d => d.Agrovet).WithMany(p => p.PharmacyTransactionsTables).HasConstraintName("FK_PharmacyTransactionsTable_AgrovetStockTable");

            entity.HasOne(d => d.Cosmetic).WithMany(p => p.PharmacyTransactionsTables).HasConstraintName("FK_PharmacyTransactionsTable_CosmeticsStockTable");

            entity.HasOne(d => d.CustomerType).WithMany(p => p.PharmacyTransactionsTables).HasConstraintName("FK_PharmacyTransactionsTable_CustomerTypeTable");

            entity.HasOne(d => d.DrugCategory).WithMany(p => p.PharmacyTransactionsTables).HasConstraintName("FK_PharmacyTransactionsTable_Drugcategories");

            entity.HasOne(d => d.Drug).WithMany(p => p.PharmacyTransactionsTables).HasConstraintName("FK_PharmacyTransactionsTable_DrugStockTable");

            entity.HasOne(d => d.Patient).WithMany(p => p.PharmacyTransactionsTables).HasConstraintName("FK_PharmacyTransactionsTable_PatientsTable");

            entity.HasOne(d => d.PrescribedByNavigation).WithMany(p => p.PharmacyTransactionsTables).HasConstraintName("FK_PharmacyTransactionsTable_PharmacyTransactionsTable");

            entity.HasOne(d => d.StockCategory).WithMany(p => p.PharmacyTransactionsTables).HasConstraintName("FK_PharmacyTransactionsTable_StockCategoryTable");
        });

        modelBuilder.Entity<RestockRequestsTable>(entity =>
        {
            entity.HasOne(d => d.RequestCategory).WithMany(p => p.RestockRequestsTables).HasConstraintName("FK_RestockRequestsTable_StockCategoryTable");

            entity.HasOne(d => d.RequestCosmetic).WithMany(p => p.RestockRequestsTables).HasConstraintName("FK_RestockRequestsTable_CosmeticsStockTable");

            entity.HasOne(d => d.RequestDrugCategory).WithMany(p => p.RestockRequestsTables).HasConstraintName("FK_RestockRequestsTable_Drugcategories");

            entity.HasOne(d => d.RequestDrug).WithMany(p => p.RestockRequestsTables).HasConstraintName("FK_RestockRequestsTable_DrugStockTable");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.RestockRequestsTables).HasConstraintName("FK_RestockRequestsTable_RestockStatusTable");
        });

        modelBuilder.Entity<StockTable>(entity =>
        {
            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.StockTables).HasConstraintName("FK_StockTable_StockCategoryTable");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}